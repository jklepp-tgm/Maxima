/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 14.09.0 ] */

/* [wxMaxima: title   start ]
            2. Portfolio            
           Schulwoche  25           
            Verbesserung            
   [wxMaxima: title   end   ] */

/* [wxMaxima: comment start ]
Themen:
  * Darstellung der zu Grunde liegenden Theorie (von der Sekante zur 
    Tangente, Differenzenquotient -> Differentialquotient)
  * Ableitung elementarer Funktionen, Ableitungsregeln
  * Kurvendiskussion
  * Umgekehrte Kurvendiskussion
  * Extremwertaufgaben
   [wxMaxima: comment end   ] */

/* [wxMaxima: section start ]
Darstellung der zu Grunde liegenden Theorie 
(von der Sekante zur Tangente, 
Differenzenquotient -> Differentialquotient)
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
load(draw);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Der Differenzenquotient ist die Steigung einer Funktion anhand einer Sekante.
Eine Sekante tritt an einer Stelle ein an einer anderen wieder aus.
Daher ist es nicht möglich die Steigung an genau einen Punkt der Funktion zu finden.

Der Differentialquotient ist ähnlich dem Differenquotient die Steigung einer Funktion,
mit dem Unterschied das die Steigung an einer Tangente und somit nur an einen Punkt, 
betrachtet wird. Das ist es auch was wir erreichen wollen.
Problematisch ist dabei nur das sich anhand eines einzelnen Punktes keine eindeutige 
Gerade finden lässt. Als Alternative nimmt man eine Sekante die durch 2 Punkte verläuft 
die im optimalfall unendlich nah beieinander sind. 
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Hier werde ich zeigen wie man die Steigung einer Funktion an einem
Punkt bestimmt. Da Funktionen welche keine Gerade definieren keine
Steigung haben, kann nur die Steigung der an einem Punkt liegenden
Tangente bestimmt werden.

Eine Gerade (also auch eine Tangente) lässt sich allerdings nicht über
einen einzelnen Punkt definieren. Dass nächst beste zu einer Tangente
ist eine Sekante. Wenn die Kurve keine alt zu starke Krümmung aufwirft
und die beiden Schnittpunkte nah genug beieinander liegen kommt eine
Sekante der gewünschten Tangente sehr nahe.

Die beiden Punkte dürfen nicht identisch sein. Wenn man zwei mal den
gleichen Punkt nimmt dividiert man durch 0, weil die Formel zu Steigungs
Berechnng Delta y / Delta x ist
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Wählen der Funktion
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
f(x):=3*x^3;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* Hier wird festgelegt an welche x Position die Steigung gefunden werden soll */
x0:1;
/* x wird in die Funktion eingesetzt um den y Wert zu erhalten.*/
y0:f(x0);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* Der zweite, beliebig gewählte Punkt. */
x1:2;
y1:f(x1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Zeichnen der Funktion mit Sekante.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
/*
Erzeugen einer Geraden durch 2 Punkte
*/
gerade(x0, y0, x1, y1):=buildq(
[x0, y0, x1, y1],
lambda([x],
/* x */ x * 
/* k */ (y1 - y0)/(x1 - x0) +
/* d */ y0 - x0 * (y1 - y0)/(x1 - x0)
));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
fI(x):=diff(f(x),x);
f(1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/*
 * erster Punkt      Gruen
 * zweiter Punkt     Orange
 * die Funktion      Blau  
 * Sekante           Rot
 */
xr:[0.8,2.2];
yr:[-2,30];
wxdraw2d(
    xrange=xr, yrange=yr,
    xaxis=true, yaxis=true,
    point_size=2, point_type=filled_circle,

    color=green,  points([x0],[y0]), 
    color=orange, points([x1],[y1]),
    color=blue,   explicit(f(x),x,xr[1],xr[2]),
    color=red,    explicit(gerade(x0, y0, x1, y1), x, xr[1],xr[2]));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Konvergieren - Slider
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Hier kann die Auflösung des Sliders festgelegt werden. 
Mit 20 (= 19 Schritten) bekommt man schon ein passables Ergebnis 
und man muss trotzdem nicht ewig auf das Ergebnis warten. 
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
n:20;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Der 2. Punkt soll sich bewegen, hier werden Koordinaten
Dynamisch erzeugt
X1(ka) erzeugt den x Wert des Punkts
Y1(ka) den y Wert
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
X1(ka):=''x1-''((x1-x0)*ka);
Y1(ka):=f(X1(ka));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
k ist die Variable die sich durch den Slider ändert
makelist(i/n,i,0,n-1) macht eine liste mit 19 Werten von 0 bis 1 z.B. (n=20) [0,1/20,1/10,3/20,...,19/20]
Der höchste Wert soll NICHT 1 sein weil eben nur angenähert werden kann. Mit 1 hätte
man wiederum nur einen Punkt und an einen Punkt kann man wie bereits erwähnt keine
Sekante bilden. 
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
with_slider_draw(
/*
Sliden
*/
k, makelist(i/n,i,0,n-1),
/*
Zeichnen
*/
xrange=xr,yrange=yr,
xaxis=true, yaxis=true,
color=blue,
explicit(f(x),x,xr[1],xr[2]),
color=green, point_size=2, point_type=filled_circle, points([x0],[y0]),
color=orange, points([X1(k)],[Y1(k)]),
color=red,
explicit(block([k_,d_], k_:(Y1(k) - y0)/(X1(k) - x0), d_:rhs(solve(Y1(k)=X1(k)*k_ + d_, [d_])[1]), return(''k_*x + ''d_)),x,xr[1],xr[2])
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Schön zu sehen, je näher sich die Punkte kommen, 
desto äher sieht die rote Sekante wie eine Tangente aus.
Wenn der Slider auf den höchsten Wert gestellt ist, kann
man die rote Sekante kaum noch von einer Tangente unterscheiden. 
   [wxMaxima: comment end   ] */

/* [wxMaxima: subsect start ]
Tabellarische Darstellung
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
X1(dx):=''x1-''((x1-x0)*dx);
Y1(dx):=f(X1(dx));
rows:makelist([[x0,y0], [X1(i), Y1(i)], (Y1(i) - y0)/(X1(i) - x0)], i, 0, 1, 0.05)$
table:matrix(["P1 [x,y]","P2 [x,y]","k"])$
makelist(table:addrow(table, rows[i]), i, 1, length(rows))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Diese Tabelle zeigt wie sich die näherung von P2 an P1 auf die Steigung k
auswirkt. 
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
table;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Ableitungsregeln
   [wxMaxima: section end   ] */

/* [wxMaxima: subsect start ]
Ableitung elementarer Funktionen
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
x^n     ->  n*x^(n-1)
ln(x)   ->  1/x 
sin(x)  ->  cos(x)
cos(x)  ->  -sin(x)
tan(x)  ->  1/cos²x
e^x     ->  e^x
   [wxMaxima: comment end   ] */

/* [wxMaxima: subsect start ]
Ableitungsregeln
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Faktorregel : 

    y = a * f(x)    -> y' = a*f'(x)

wobei a eine Konstante ist.
Ein konstanter Faktor z.B a bleibt beim Differenzieren erhalten

Summenregel :  

    y = (u + v)'  -> y' = u' + v'
    y = (u - v)'  -> y' = u' - v'

Eine Summe oder Differenz von Funktionen kann gliedweise differenziert werden

Produktregel : 

    y = (u*v)'      -> y' = u'*v + u*v'

Man leitet im Produkt stets nur einen Faktor ab und addiert dann

Quotienten- oder Bruchregel:

    y = (u/v)'      -> y' = (u'*v - u*v') / v²

Kettenregel : 

    y = f(g(x))     -> y' = f'(g(x)) * g(x)

   [wxMaxima: comment end   ] */

/* [wxMaxima: section start ]
Kurvendiskussion
   [wxMaxima: section end   ] */

/* [wxMaxima: comment start ]
Unter einer Kurvendiskussion versteht man in der Mathematik die Untersuchung einer
Funktion auf ihre geometrische Eigenschaften.

Die zu untersuchende Eigenschaften sind:
    Definitionsmenge
    Pole, Lücken, Nullstellen
    Asymptote
    Extremwert
    Wendepunkt & Wendetangente
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
load(draw);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* Funktion */
f:x^3 / (x^2 - 4);
f_fun(x):=''f;
/* Zähler */
z: num(f);
z_fun(x):=''z;
/* Nenner */
n: denom(f);
n_fun(x):=''n;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Zeichnen der Funktion um Überblick zu gewinnen
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
wxdraw2d(
xrange=[-15,15],
yrange=[-25,25],
explicit(f,x,-150,15)
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Definitionsmenge
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Definiert sind alle Werte außer die welche den Nenner 0 setzen.
Daher müssen alle Punkte gefunden an denen der Nenner 0 ist.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
solve(n,x)$
ud:ud:makelist(rhs(%[i]), i, length(%));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Definiert sind alle Reelen Zahlen außer -2 und 2
D = ℝ{-2,2}
   [wxMaxima: comment end   ] */

/* [wxMaxima: subsect start ]
Pole, Lücken, Nullstellen
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Pole sind Stellen an denen die Funktion aus dem Definierten bereich
hinaus geht. Also über +/-unendlich hinausgeht. Am Graphen sieht man
dann z.B. dass die Funktione Steil nach oben geht bis sie nicht mehr
zu sehen ist und dann vom unteren Rand wieder ins Bild kommt. 

Rechnerisch erkennt man diese Besonderheit daran das der Nenner auf
0 geht der Zähler aber nicht. 
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Bei Lücken gibt es einfach eine Lücke in der Funktion. Am Graph gibt
es einen Sprung aber keinen Polsprung. 

Man erkennt eine Lücke daran das sowohl Nenner als auch Zähle auf
0 sind.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Bei Nullstellen schneidet die Funktion die x-Achse oder wird zumindest
von ihr Tangiert. 

Man erkennt sie daran das der Zähler 0 ist der Nener aber nicht. 
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
solve(z,x)$
z0:ud:makelist(rhs(%[i]), i, length(%));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Alle gefundenen werte werden in eine Liste geworfen
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
list:append(z0,ud);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Werte werden mit einer Schleife
 nach Pole, Lücken und Nullstellen sortiert
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
p_:[]$/*Pole*/
l_:[]$/*Lücken*/
n_:[]$/*Nullstellen*/
for i:1 step 1 thru length(list) do
    if (''z_fun(list[i]) = 0) then 
        if (''n_fun(list[i]) = 0) then l_:append(l_,[list[i]])  /*Lücken*/
        else n_:append(n_,[list[i]])                        /*Nullstellen*/
    else p_:append(p_,[list[i]])                            /*Pole*/$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Ergebnise werden angezeigt
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
disp("Die Funktion enthält:","Pole",p_,"Lücken",l_,"Nullstellen",n_);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Asymptote
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Die Asymptote ist ein Graph welcher sich der Funktion
beliebig annähert sie aber nicht berührt oder schneidet.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Wie die Asymptote aussieht ist vor allem vom höchsten Grad von 
Zähler und Nenner abhängig. 

Fall 1 - der Grad des Nenners ist höher:
    Die Funktion ist eine echte gebrochen Rationale Funktion
    Die Asymptote ist die x Achse

Fall 2 - der Grad des Nenners ist der gleiche wie der Grad des Zählers:
    unecht gebrochene rationale Funktion
    Asymtote ist y=a/b    
    a:Koeffizient des höchsten Grades im Zähler , 3*x²  Koeffizient = 3
    b:Koeffizient des höchsten Grades im Nenner

Fall 3 - der Grad des Zählers ist höher:
    unecht gebrochen rationale Funktion
    Asymtote ist Ergebnis der Polynomdivision(z(x)/n(x)) ohne Rest
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
/* Mit divide wird die division durchgeführt.
   Zurück bekommt man eine Liste, deren erstes Element ist das ergebnis,
   das zweite der Rest. */
di: divide(z,n);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Auf die gegebenen Funktion triff Fall 3 zu.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
asymps: [di[1]];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Extremwert (Minimum/Maximum/Sattelpunkt)
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Ein Extremwert einer Funktion ist entweder der höchste (Maximum) oder
der niederste (Minimum) Punkt einer Funktion.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Um den Extremwert zu finden muss zuerst die Funktion abgeleitet werden.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
fI(x):=''(diff(f,x,1));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Um später herauszufinden ob es sich bei dem Extremwert um ein Minimum
oder ein Maximum handelt braucht man außerdem die 2. Ableitung
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
fII(x):=''(diff(f,x,2));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Denn x Wert des Extremwert bekommt man jetzt wenn man von der ersten Ableitung 
die Nullstelle sucht.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
extremX:solve(fI(x),x);
/* entfernen der x= */
extremX: makelist(rhs(extremX[i]), i, length(extremX));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Die Passenden y Werte bekommt man wenn man in die x Werte in
die Grundfunktion einsetzt.

Man kann der Funktion gleich eine Liste als Parameter geben,
die Funktion wird dann auf jeden der Parameter angewandt.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
extremY: makelist(f_fun(extremX[i]), i, length(extremX));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Extremwerte in ein nutzbares Format bringen, 
und in die Variable exerg speichern.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Überprüfen ob die Extremwerte Maxima, Minima oder Sattelpunkte sind

2. Ableitung = 0 -> Sattelpunkt
2. Ableitung < 0 -> Minimum
2. Ableitung > 0 -> Maximum
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
mima:[];
for i:1 step 1 thru length(extremX) do
    if (fII(extremX[i])=0) then mima:append(mima,["Sattelpunkt"])
    elseif (fII(extremX[i])<0) then mima:append(mima, ["Maximum"])
    else mima:append(mima, ["Minimum"]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
mima;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Extremwerte ausgeben:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
extrem_erg: matrix(["Art", "Punkt [x,y]"])$
for i:1 step 1 thru length(extremX) do
    extrem_erg: addrow(extrem_erg, [mima[i], [extremX[i], extremY[i]]])$
disp("Die Extremwerte sind:",extrem_erg)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Wendepunkt & Wendetangente
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Der Wendepunkt ist ein Punkt an dem die Funktion ihr Krümmungsverhalten
ändert.

Wendepunkte findet man wenn man die Nullstellen der 2. Ableitung (man bekommt den x Wert)
in den Zähler der Funktion einsetzt. (man bekommt den y Wert)
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Nullstelle bilden, hier verwende ich realroots um keine
imaginären Nullstellen zu bekommen

Wenn realroots Probleme bereitet kann auch solve(fII(x), x) verwendet werden
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
fII(x);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
rr:realroots(fII(x));
wendeX:makelist(rhs(rr[i]), i, length(rr));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
wendeY:makelist(f_fun(wendeX[i]), i, length(wendeX));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Der Wendepunkt liegt wie der Sattelpunkt auf dem Koordinaten ursprung,
daher ist die Wendetangente die y Achse.
Ansonsten wuerde der x-Wert des Wendepunkts in erste Ableitung eingesetzt
 -> man erhält die Steigung der Wendetangente
Der x- und y- und k-Wert in allgemeine Geradengleichung(y=k*x+d) eingesetzt 
 -> man bekommt d, wodurch man nun die Wendetangente hat
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ks:makelist(
    fI(wendeX[i]), 
i, length(wendeX));
ds:makelist(
    rhs(
        solve(
            subst([k=ks[i], x=wendeX[i], y=wendeY[i]], y=k*x+d), d
        )[1]
    ),
i, length(wendeX));
wendeTang:makelist(
subst([
    k=ks[i],
    d=ds[i]
],
k*x + d
), i, length(wendeX));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Ausgabe der Wendepunkte
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
wende_erg: matrix(["Wendepunkt [x,y]", "Wendetangente"])$
for i:1 step 1 thru length(wendeX) do
    wende_erg: addrow(wende_erg, [[wendeX[i], wendeY[i]], wendeTang[i]])$
disp("Die Wendepunkte sind:",wende_erg)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Zeichnen
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
disp("Undefinierte Stellen: ", ud)$
disp("Pole:",p_,"Lücken:",l_,"Nullstellen:",n_)$
disp("Asymptoten:", asymps)$
disp("Extremwerte:", extrem_erg)$
disp("Die Wendepunkte sind:",wende_erg)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
vertical_line(x):=polygon([x, x],[-9000, 9000]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
wxdraw2d(
xrange=[-7,7],
yrange=[-25,25],

/* Kurve */
explicit(f,x,-150,150),

/* Undefinierte Stellen */
fill_color=yellow,
makelist(vertical_line(ud[i]), i, length(ud)),

/* Pole */
fill_color=cyan,
makelist(vertical_line(p_[i]), i, length(p_)),

/* Lücken */
makelist(vertical_line(l_[i]), i, length(l_)),

/* Nullstellen */
color=red, point_size=1.5,point_type=filled_circle,
points(n_, makelist(0, i, length(n_))),

/* Asymptoten */
color=green, line_type=solid,
makelist(explicit(asymps[i], x, -150, 150), i, length(asymps)),

/* Extremwerte */
color=black,
point_type=asterisk,
points(extremX, extremY),
makelist(label([mima[i], extremX[i], extremY[i]-3]), i, length(extremX)),

/* Wendepunkte & Tangenten */
color=orange,
point_type=circle, point_size=2.5,
points(wendeX, wendeY),
makelist(explicit(wendeTang[i], x, -7, 7), i, length(wendeTang))
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Umgekehrte Kurvendiskussion
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
load(draw);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Bei der umgekehrten Kurvendiskussion geht es darum, aus besonderen Werten
wie man sie bei der Kurvendiskussion bekommt, eie Kurve zu rekonstruiren.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
1.  Aufstellen der allgemeinen Form und deren Ableitungen

2.  Überprüfung, wieviele Variablen die allgemeine Form beinhaltet

3.  So viele Bedingungen aufstellen , wie Variable vorhanden sind
    -> Variablen mit einem Gleichungssystem berechnen

4.  Variable in die allgemeine Form einsetzen

5.  Funktion und gegeben Eigenschaften in einer Grafik einzeichnen,anzeigen und überprüfen
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
allgemeine Form
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
f(x):=a*x^3+b*x^2+c*x+d;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Ableitungen
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
af1(x):=''(diff(f(x),x,1));
af2(x):=''(diff(f(x),x,2));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Beispiel:
Der Graph einer Funktion 3. Ordnung hat in
P1(-1|16/3) einen relativen Extrempunkt
und hat in
W(1|y) einen Wendepunkt
Der Graph schneidet die y-Achse bei 11/3
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
be:[0,0,0,0];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Daraus ergibt sich: 
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
dass der Graph den Punkt -1|16/3 schneidet
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
be[1]:f(-1)=16/3;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
der Graph schneidet bei 11/3 die y-Achse daher
Damit haben wir schon d bestimmt
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
be[2]:f(0)=11/3;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Da der Graph bei 1|y einen Wendepunkt hat 
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
be[3]:af1(-1)=0;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
be[4]:af2(1)=0;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Auflösen mit algsys
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
erg:algsys(be,[a,b,c,d])[1];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Zuweisen von a,b,c,d
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
a:rhs(erg[1]);
b:rhs(erg[2]);
c:rhs(erg[3]);
d:rhs(erg[4]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
In die allgemeine Form einsetzen
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
f(x);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Zeichnen
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
xr:[-3/2,3/2]$
yr:[-4/3,20/3]$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/*
 * _fv      die Funktion        Blau  
 * _s1      Schnitt y-Achse     Rot
 * _ext     Extrempunkt         Gruen
 * _wp1     Wendepunkt          Orange
 */
_fv:explicit(f(x),x,xr[1],xr[2])$ 
_ext:points([-1],[16/3])$
_s1:points([0],[11/3])$
_wp1:points([1],[f(1)])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
wxdraw2d(xrange=xr, yrange=yr,
xaxis=true, yaxis=true,
color=blue,_fv,
color=red,point_type=filled_circle,point_size=2,_s1,
color=green,_ext,
color=orange,_wp1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Die Punkte aus der Angabe passen alle Perfekt auf die
rekonstruirte Kurve. Daher würd ich sagen das es so stimmt. 
   [wxMaxima: comment end   ] */

/* [wxMaxima: section start ]
Extremwertaufgabe
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Extremwertprobleme sind Aufgaben, in denen eine Größe optimiert werden soll.
Entweder ein Minimum(z.B Kosten) oder Maximum(z.B Gewinn)

Vorgangsweise:

1. Aufstellen der Hauptbedingung und der Zielfunktion

2. Suchen der Nebenbedingungen
    -> In die Hauptbedingung einsetzen

3. Erste und zweite Ableitung bilden

4. Nullstelle der ersten Ableitung suchen

5. Errechneten Wert in die Nebenbedingun einsetzen 

6. Daraus resultierende Werte in die Zielfunktion einsetzen

7. Antwort formulieren
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Aufgabe:
Es soll ein rechteckiges Grundstueck mit einem 40m langen Zaun eingezaeunt werden.
Auf einer Seite des Grundstücks ist eine Mauer, diese Seite erfordert keine Zaun.

Ziel soll es sein mit dem vorhandenen Zaun eine möglichst große Flaeche ab zu stecken.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Rechteck Flaeche
Ist von der Laenge und der Breite abhaengig
Das ist unsere Hauptfunktion
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
A1(l,b):=l*b;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Eine Seite wird von einer Mauer geschuetzt, die Summe der
restlichen Seiten ist 40 m
Die Nebenbedingung
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
l+2*b=40;
/*Nach l aufloesen*/
l:rhs(solve(%,l)[1]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Länge in die Flaechenformel einsetzen
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
A2(b):=''(A1(''l,b));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Nun haben wir eine Flaechenformel welche nur noch von
einen Parameter, der Breite abhängig ist. 
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Von diseser Formel wird nun die erste und zweite Ableitung gebildet
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
af1(b):=''(diff(A2(b),b,1));
af2(b):=''(diff(A2(b),b,2));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Nullstelle der ersten Ableitung finden
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
solve(af1(b),b);
b:rhs(%[1]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Errechnete Breite in die modifizierte Flaechenformel einsetzen
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
loe:A2(b);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Antwort formulieren
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
disp("Die maximal einzaeunbare Flaeche betraegt:",loe*m^2)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Zeichnung des funktionalen zusammenhanges
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
wxdraw2d(
explicit(A2(x), x, 0, 20));
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
