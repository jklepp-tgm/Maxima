/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 14.09.0 ] */

/* [wxMaxima: title   start ]
          Portfolio 5           
Funktionen in mehreren Variablen
          Jakob Klepp           
    23.10.2013 - 30.10.2013     
   [wxMaxima: title   end   ] */

/* [wxMaxima: section start ]
Funktionen in mehreren Variablen
   [wxMaxima: section end   ] */

/* [wxMaxima: comment start ]
Unter einer Funktion  z = f(x, y)  einer Funktion x,y versteht
man eine zuordnung die jedem geordneten Paar [x, y] genau einen
Wert [z = f(x, y)] zuordnet.

     z
     ^
     |
     .- - - -.
    .|      .
   . |     .
  .  |    .
 - - - - o (x,y,z)
     +---:---.------> y
    /    :  .
   /     : .
  /      :.
 /- - - - (x,y)
v
x

   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Partielle Ableitung

Bei einer Partiellen Ableitung einer Funktion f(x,y) wird nach
EINER Variable (x oder y) differenziert, wobei man die andere
Variable vorrübergehend als Konstante betrachtet.

f'(x,y) keine sinnvolle Schreibweise für eine Ableitung einer
Funktion in mehreren Variablen da hierbei die Variable nach der
abegeleitet werden soll nciht deklariert wird.

Stattdessen fx(x,y) oder fy(x,y)

Statt f'' entsprechend ... fxx
                           fxy
                           fyx
                           fyy

1. Ableitung nach x:
             δ          δf
  fx(x,y) = -- f(x,y) = --(x,y)
            δx          δx

1. Ableitung nach y:
             δ          δf
  fy(x,y) = -- f(x,y) = --(x,y)
            δy          δy

2. Ableitungen:
             δ            δf
  fxx(x,y)= -- fx(x,y) = ----
            δx           δxδx

             δ            δf
  fxy(x,y)= -- fx(x,y) = ----
            δy           δxδy

   [wxMaxima: comment end   ] */

/* [wxMaxima: section start ]
Extremwerte von Funktionen in mehreren Variablen
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
load(draw);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Erklärung
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Quadratische Gleichungen:
    Bei Funktionen einer Variable wird ein Extremwert gefunden
    indem man die erste Ableitung nullsetzt. 
    Extremwerte sind an den Stellen mit einer Waagrechten
    Tangente zu finden.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Gleichungen höheren Grades:
  Bei mehrdimensionalen Funktionen genügt es nicht 
  festzustellen das die erste Ableitung Null ist um einen 
  Extremwert zu identifizieren.
  Eine zur xy-Ebene parallele Tangentialebene karakterisiert
  zwar eine "Senke" (lokales Minimum) oder eine "Quelle"
  (lokales Maximum), aber auch einen Sattelpunkt

  Notwendidige Bedingungen:

    fx = 0
    fy = 0

    Mit hilfe dieser Bedingungen findet man alle Orte die
    Senke, Quellen oder Sattelpunkte sein können.

  Hinreichende Bedingungen:

    fxx * fyy - (fxy)² > 0: Extremwert
              
                           fxx < 0: Maximum

                           fxx > 0: Minimum

   [wxMaxima: comment end   ] */

/* [wxMaxima: subsect start ]
Beispiel
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Angabe
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
f(x,y):= x³ + y³ + 6*x*y;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Ableitungen
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
fx: diff(f(x,y), x, 1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
fy: diff(f(x,y), y, 1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
fxx: diff(f(x,y), x, 2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
fxy: diff(fx, y, 1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
fyy: diff(f(x,y), y, 2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Notwendige Bedingungen
Erste Ableitungen = 0
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
nb:solve([fx=0, fy=0], [x,y]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Hinreichende Bedingungen
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
hb:fxx*fyy - (fxy²) > 0;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
hb_max: fxx<0;
hb_min: fxx>0;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Lösungen der Notwenidigen Bedingung in die Hinreichende
Bedingung einsetzen
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
minima : []$
maxima : []$
for pair in nb do
(
    if ( subst(pair, hb) and subst(pair, hb_max) ) then
        maxima:append(maxima,[pair])
    else
    if ( subst(pair, hb) and subst(pair, hb_min) ) then
        minima:append(minima,[pair])
)$
"Diese Maxima wurden gefunden:";
maxima;
"Diese Minima wurden gefunden:";
minima;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Zeichnung
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
wxplot3d(f(x,y), [x,-4,1], [y,-4,1], [z,-40,10]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Anwendung [von Extremwerten] in der Fehlerrechnung
   [wxMaxima: section end   ] */

/* [wxMaxima: subsect start ]
Erklärung
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Jede Physikalische/Technische Messung ist prinzipiell mit einem Fehler
behaftet. Dieser Fahler basiert darauf, dass jedes Meßgerät nur endliche
Genauigkeit hat.
Verschiedene Teilergebnisse werden über einen funktionalen Zusammenhang
zu einem Gesamtresultat zusammengesetzt. 
Die Gauss'sche Fehlerrechnung untersucht, die Größe des Fehlers im
Gesamtresultat, sowohl Absolut als auch Relativ, und die Gewichtung
der Fehler aus dem Teilmeßung, die dann zum Fehler im Gesamtresultat 
führen.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
/*
kleiner Meßfehler
*/
f(x):=log(1.5*x-0.5)+2$ "f(x)"=f(x);
X: 1$ "x"=X;
ΔX: 0.25$ "Δx"=ΔX;
wxdraw2d(
xrange=[-0.3,1.8], yrange=[-0.6,3], xaxis=true, yaxis=true,
color = black, explicit(log(1.5*x-0.5)+2,x,0.3,3),
color=royalblue, points_joined=true, line_type=solid,
points([[X, 0],[1, f(X)], [0, f(X)]]),
color = light-green,
points([[X - ΔX, 0],[X - ΔX, f(X - ΔX)], [0, f(X - ΔX)]]),
color = light-red,
points([[X + ΔX, 0],[X + ΔX, f(X + ΔX)], [0, f(X + ΔX)]]),
color = magenta, label(["Δx", X, -0.3]), label(["Δy", -0.1, f(X)]),
points([[X - ΔX, 0],[X + ΔX, 0]]),
points([[0, f(X - ΔX)],[0, f(X + ΔX)]])
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/*

großer Meßfehler

*/
f(x):=log(1.5*x-0.5)+2$ "f(x)"=f(x);
X: 1$ "x"=X;
ΔX: 0.5$ "Δx"=ΔX;
wxdraw2d(
xrange=[-0.3,1.8], yrange=[-0.6,3], xaxis=true, yaxis=true,
color = black, explicit(log(1.5*x-0.5)+2,x,0.3,3),
color=royalblue, points_joined=true, line_type=solid,
points([[X, 0],[1, f(X)], [0, f(X)]]),
color = light-green,
points([[X - ΔX, 0],[X - ΔX, f(X - ΔX)], [0, f(X - ΔX)]]),
color = light-red,
points([[X + ΔX, 0],[X + ΔX, f(X + ΔX)], [0, f(X + ΔX)]]),
color = magenta, label(["Δx", X, -0.3]), label(["Δy", -0.1, f(X)]),
points([[X - ΔX, 0],[X + ΔX, 0]]),
points([[0, f(X - ΔX)],[0, f(X + ΔX)]])
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
x ... Meßwert ± Ungenauigkeit: x ± Δx
y ... Resultat

Analyse:

  Auf dem Fehler im Gesamtergebnis hat jeder Fehler im
  Teilergebnis eine direkt proportionale Auswirkung

  je größer Δx desto größer Δy
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
/*

geringe Steigung

*/
f(x):=log(1.5*x-0.5)/2+2$ "f(x)"=f(x);
X: 1$ "x"=X;
ΔX: 0.25$ "Δx"=ΔX;
wxdraw2d(
xrange=[-0.3,1.8], yrange=[-0.6,3], xaxis=true, yaxis=true,
color = black, explicit(log(1.5*x-0.5)+2,x,0.3,3),
color=royalblue, points_joined=true, line_type=solid,
points([[X, 0],[1, f(X)], [0, f(X)]]),
color = light-green,
points([[X - ΔX, 0],[X - ΔX, f(X - ΔX)], [0, f(X - ΔX)]]),
color = light-red,
points([[X + ΔX, 0],[X + ΔX, f(X + ΔX)], [0, f(X + ΔX)]]),
color = magenta, label(["Δx", X, -0.3]), label(["Δy", -0.1, f(X)]),
points([[X - ΔX, 0],[X + ΔX, 0]]),
points([[0, f(X - ΔX)],[0, f(X + ΔX)]])
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/*

hohe Steigung

*/
f(x):=2*log(1.5*x-0.5)+2$ "f(x)"=f(x);
X: 1$ "x"=X;
ΔX: 0.25$ "Δx"=ΔX;
wxdraw2d(
xrange=[-0.3,1.8], yrange=[-0.6,3], xaxis=true, yaxis=true,
color = black, explicit(log(1.5*x-0.5)+2,x,0.3,3),
color=royalblue, points_joined=true, line_type=solid,
points([[X, 0],[1, f(X)], [0, f(X)]]),
color = light-green,
points([[X - ΔX, 0],[X - ΔX, f(X - ΔX)], [0, f(X - ΔX)]]),
color = light-red,
points([[X + ΔX, 0],[X + ΔX, f(X + ΔX)], [0, f(X + ΔX)]]),
color = magenta, label(["Δx", X, -0.3]), label(["Δy", -0.1, f(X)]),
points([[X - ΔX, 0],[X + ΔX, 0]]),
points([[0, f(X - ΔX)],[0, f(X + ΔX)]])
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Analyse:

  Bei gleicher größe des Einzelfehlers ergibt sich ein
  größerer Fehler im Resultat, wenn die Abhängigkeit des
  Resultats vom Teilergebnis größer ist.

  Das heißt wenn die Steigung vom Funktionalen Zusammenhang größer ist.

  Das heißt wenn die erste Ableitung größer ist.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Bevor man den Fehler berechnet sollte man alles in SI-Einheiten umwandeln.

Man rechnet immer mit den positiven Werten der Fehlerangabe.
Bsp: Höhe +- 5%, Höhe +- 0.05m

R = R(x,y,z)

     |δR     |   |δR     |   |δR     |
ΔR = |-- * Δx| + |-- * Δy| + |-- + Δz|
     |δx     |   |δy     |   |δz     |
     ___
     \   | δR        |
ΔR =  >  |---- * Δx_i|
     /__ |δx_i       |
          /          \
         /            \
  Partielle        Unsicherheit/Fehler
  Ableitung        von x_i
  von R(x_i)
  Auswertung
  an der
  Meßstelle
   [wxMaxima: comment end   ] */

/* [wxMaxima: subsect start ]
Beispiel
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Die Schwingdauer eines mathematische Pendels der Lange l ist T = 2*%pi*sqrt(l/g)
Welcher absolute Fehler ergibt sich in T wenn l = 1 m und g = 10 m/s^2 ?
Welchen prozentuellen Fehler hat man für T höchstens zu erwarten ?
Wenn l höchstens auf +- 0.02m und g höchstens auf +- 5% genau gemessen wurden.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Als erstes speichere ich die Funktion aus der Angabe in eine Variable,
und forme diese dann nach h um.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
f: T = 2*%pi*sqrt(l/g);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Hier speichere ich die Werte aus der Angabe und deren Fehler.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
wertL:1;
wertG:10;
fehlerL: 0.02;
fehlerG: wertG*0.05;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Nun setze ich die Werte aus der Angabe ein, um T zu berechnen.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
wertT: rhs(subst([l=wertL+fehlerL, g=wertG+fehlerG],f)), numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Das ist das Ergebnis für T, mit den Fehlern in den Einzelmessungen.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Hier Bilde ich die 1.Ableitungen von T nach l und g, da die Steigung
der Funktion einen wesentlichen Beitrag beim Berechnen des Fehlers leistet.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
fTl: diff(rhs(f), l, 1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
fTg: diff(rhs(f), g, 1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Hier werden die Werte der jeweiligen Variablen in ihre 1.Ableitungen
eingesetzt und dem Delat(Fehler) der jeweiligen Variable multipliziert.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
deltaL: subst([l=wertL,g=wertG],abs(fTl * fehlerL)), numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
deltaG: subst([l=wertL,g=wertG],abs(fTg * fehlerG)), numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
deltaT: deltaL + deltaG, numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Nun stelle ich die Einzelfehler als Barchart dar.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
wxdraw2d(
xrange = [0.5,1.5],
yrange = [0,0.07],
key = "Länge",
fill_color = blue,
fill_density = 0.4,
line_width = 2,
bars([0.8,deltaL,0.4]),
key = "Beschleunigung",
fill_color = red,
fill_density = 0.4,
line_width = 2,
bars([1.2,deltaG,0.4]),
xaxis = true);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Nun stelle ich die Einzelfehler als Piechart dar.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Umrechnen der Einzelfehler, in Prozent von einem Kreis, also Grad.
Das Minus muss davor gesetz werden um es richtig Zeichnen zu können.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lkreis: deltaL/deltaT * 360 * (-1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
gkreis: deltaG/deltaT * 360 * (-1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
wxdraw2d(
xrange = [-5.5,9.5],
yrange = [3,9],
key = "Länge",
fill_color = royalblue,
fill_density = 0.4,
color = navy,
line_width  = 2,
ellipse(0,6,3,2,-90,lkreis),
key = "Beschleunigung",
fill_color = light-red,
fill_density = 0.4,
color = dark-red,
line_width  = 2,
ellipse(0,6,3,2,270,gkreis*(-1)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
In den Zeichnungen(darüber) und auch an den Werten (darunter ausgegeben) ist 
klar und deutlich zu erkennen das der größere 
Fehler von der Beschleunigung komm, da auch DeltaBeschleunigung größer ist als DeltaLänge.
Der Einzelfehler des Volumens trägt ~ 67 % zum Gesamtfehler bei.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
deltaL;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
deltaG;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Hier die Berechung des relativen Fehlers.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
wertT;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
deltaT;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Hier sieht man wie groß der absolute Fehler im gegensatz zum Ergebnis ist.
Nun werde ich den Relativen wert berechenen.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
relativT: deltaT/wertT;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Der relative Fehler für die Dauer(T) des Pendels liegt bei ~ +-3,5 %
   [wxMaxima: comment end   ] */

/* [wxMaxima: section start ]
Lineare, quadratische und kubische Regression
   [wxMaxima: section end   ] */

/* [wxMaxima: comment start ]
Regression: Methode der kleinsten Quadrate

Bei einer Regression wird die Funktion gesucht welche am "besten"
zu einer Menge an Punkten passt.

Die Anzahl der Punkte muss mindestens um 1 höher sein als der
Grad der Regression. Wenn der Grad gleich groß wie die Anzahl an
Punkten ist kann die richtige Funktion einfach aufgestellt werden
(x - x1)(x - x2) ...
Bei weniger Punkten gibt es unendlich viele Lösungen.

Bei der Methode der kleinsten Quadrate wird (im Falle der Linearen 
regression) die Optimale Funktion gesucht indem der Abstand der 
Punkte zu dem Punkt auf der Funktion mit dem gleichen x-Wert
quadriert wird. Die Summe dieser Quadrate wird in Form einer
Extremwertaufgabe minimiert. 
   [wxMaxima: comment end   ] */

/* [wxMaxima: subsect start ]
Lineare Regression
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
load(draw);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* erste Gleichung als Funktion */
I (punkte):= k*sum((punkte[i][1])^2,i,1,length(punkte))
  + d*sum(punkte[i][1],i,1,length(punkte)) 
  = sum((punkte[i][1])*(punkte[i][2]),i,1,length(punkte));
/* zweite Gleichung als Funktion */
II(punkte):= k*sum(punkte[i][1],i,1,length(punkte)) 
  + d*length(punkte) 
  = sum(punkte[i][2],i,1,length(punkte));
/* beide Gleichungen als Gleichungssystem lösen */
/*
Regression: Methode der kleinsten Quadrate
punkte: [[x0,y0], [x1,y1], [x2, y2], ...] 
*/
regr_lin(punkte):=solve([I(punkte), II(punkte)],[k,d])[1];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
=========================
  Anwendung + Zeichnung
=========================
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Punkte aus der Schulübung
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
p: [[2,1],[3,3],[5,4]];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
einsetzen der Punkte in die regr_lin Funktion
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
loe:regr_lin(p);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Linieare Funktion aus k, d bilden
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
subst(loe, k*x+d)$
y(x):=''%;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Linie + Punkte zeichnen
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
punkte:points(p);
linie: explicit(y(x),x,0,6);
wxdraw2d(xrange=[0,6],yrange=[0,6],color=blue, linie, color=red, punkte);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Quadratische Regression
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
load(draw);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
erste Gleichung als Funktion
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
I  (punkte):= 
    a * sum((punkte[i][1])^4,i,1,length(punkte))
  + b * sum((punkte[i][1])^3,i,1,length(punkte)) 
  + c * sum((punkte[i][1])^2,i,1,length(punkte))
= sum((punkte[i][1])^2*(punkte[i][2]),i,1,length(punkte));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
zweite Gleichung als Funktion
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
II  (punkte):= 
    a * sum((punkte[i][1])^3,i,1,length(punkte))
  + b * sum((punkte[i][1])^2,i,1,length(punkte)) 
  + c * sum((punkte[i][1])  ,i,1,length(punkte))
      = sum((punkte[i][1])  *(punkte[i][2]),i,1,length(punkte));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
dritte Gleichung als Funktion
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
III  (punkte):= 
    a * sum((punkte[i][1])^2,i,1,length(punkte))
  + b * sum((punkte[i][1])  ,i,1,length(punkte)) 
  + c * length(punkte)
 = sum((punkte[i][2]),i,1,length(punkte));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
die Gleichungen als Gleichungssystem lösen
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
regr_2(punkte):=solve([I(punkte), II(punkte), III(punkte)],[a,b,c])[1];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
=========================
  Anwendung + Zeichnung
=========================
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
load(draw);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Punkte aus Angabe
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
p:[[1,1],[2,2],[4,3],[6,5]];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
In selbst definierte Funktion einsetzen
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
loe:regr_2(p);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Parabell erzeugen
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
y:subst(loe, a*x^2 + b*x + c);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
punkte:points(p);
linie: explicit(y,x,0,7);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
wxdraw2d(xrange=[0,7],color=blue, linie, color=red, punkte);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Kubische Regression
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
load(draw);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
erste Gleichung als Funktion
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
I  (punkte):= 
    a * sum((punkte[i][1])^6,i,1,length(punkte))
  + b * sum((punkte[i][1])^5,i,1,length(punkte)) 
  + c * sum((punkte[i][1])^4,i,1,length(punkte))
  + d * sum((punkte[i][1])^3,i,1,length(punkte))
      = sum((punkte[i][1])^3*(punkte[i][2]),i,1,length(punkte));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
zweite Gleichung als Funktion
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
II  (punkte):= 
    a * sum((punkte[i][1])^5,i,1,length(punkte))
  + b * sum((punkte[i][1])^4,i,1,length(punkte)) 
  + c * sum((punkte[i][1])^3,i,1,length(punkte))
  + d * sum((punkte[i][1])^2,i,1,length(punkte))
      = sum((punkte[i][1])^2*(punkte[i][2]),i,1,length(punkte));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
dritte Gleichung als Funktion
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
III  (punkte):= 
    a * sum((punkte[i][1])^4,i,1,length(punkte))
  + b * sum((punkte[i][1])^3,i,1,length(punkte)) 
  + c * sum((punkte[i][1])^2,i,1,length(punkte))
  + d * sum((punkte[i][1])^1,i,1,length(punkte))
      = sum((punkte[i][1])^1*(punkte[i][2]),i,1,length(punkte));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
vierte Gleichung als Funktion
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
IV  (punkte):= 
    a * sum((punkte[i][1])^3,i,1,length(punkte))
  + b * sum((punkte[i][1])^2,i,1,length(punkte)) 
  + c * sum((punkte[i][1])^1,i,1,length(punkte))
  + d * length(punkte)
      = sum((punkte[i][2]),i,1,length(punkte));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
die Gleichungen als Gleichungssystem lösen
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
regr_3(punkte):=solve([I(punkte), II(punkte), III(punkte), IV(punkte)],[a,b,c,d])[1];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
=========================
  Anwendung + Zeichnung
=========================
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
load(draw);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Punkte aus Angabe
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
p:[[1,1],[2,2],[4,3],[6,5],[8,7]];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
In selbst definierte Funktion einsetzen
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
loe:regr_3(p);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Parabell erzeugen
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
y:subst(loe, a*x^3 + b*x^2 + c*x + d);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
punkte:points(p);
linie: explicit(y,x,0,9);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
wxdraw2d(xrange=[0,9], yrange=[0,8],color=blue, linie, color=red, punkte);
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
